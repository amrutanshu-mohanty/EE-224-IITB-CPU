library ieee;
 use ieee.std_logic_1164.all;
 use ieee.numeric_std.all;
 
 entity blinding_lights_with_counter is
	port(
		reset, clk: in std_logic;
		outp: out std_logic_vector(0 to 7)
	);
 end blinding_lights_with_counter;
 
 architecture bhv of blinding_lights_with_counter is
	------------------Define state type here-----------------
	type state is (rst, s1, s2, s3, s4, s5, s6, s7);
	--Fill other states here
	------------------Define signals of state type-------------
	signal y_present, y_next: state := rst;
	signal count : integer := 0;
	signal clk_1Hz : std_logic := '0';
	
	component clock_divider is
		port( clk_in, reset : in std_logic := '0';
		clk_out : out std_logic := '1');
	end component;
	
begin
	clk1 : clock_divider port map(clk, '0', clk_1Hz);
	
	clock_proc : process(y_next, clk_1Hz, count, reset)
	begin
		if(reset = '1') then
			y_present <= rst;
			count <= 0;
		else
			y_present <= y_next;
			if rising_edge(clk_1Hz) then
				if (count < 24) then
					count <= count + 1;
				else 
					count <= 0;
				end if;
			end if;
		end if;
	end process;
	
	
	state_transition_proc_1:process(y_present, count)
	begin
	case y_present is
		when rst =>
		-- when _ checks if current state is _
			if(count = 5) then--s has been detected
				y_next <= s1; -- Fill the code here
			else
				y_next <= rst;
			end if;
		when s1 =>
		-- when _ checks if current state is _
			if(count = 6) then--st has been detected
				y_next <= s2; -- Fill the code here
			else
				y_next <= s1;
			end if;
		when s2 =>
		-- when _ checks if current state is _
			if(count = 11) then--stu has been detected
				y_next <= s3; -- Fill the code here
			else
				y_next <= s2;
			end if;
		when s3 =>
		-- when _ checks if current state is _
			if(count = 12) then--stud has been detected
				y_next <= s4; -- Fill the code here
			else
				y_next <= s3;
			end if;
		when s4 =>
		-- when _ checks if current state is _
			if(count = 17) then--stude has been detected
				y_next <= s5; -- Fill the code here
			else
				y_next <= s4;
			end if;
		when s5 =>
		-- when _ checks if current state is _
			if(count = 18) then--studen has been detected
				y_next <= s6; -- Fill the code here
			else
				y_next <= s5;
			end if;
		when s6 =>
		-- when _ checks if current state is _
			if(count = 23) then--student has been detected
				y_next <= s7; -- Fill the code here
			else
				y_next <= s6;
			end if;
		when s7 =>
			if(count = 0) then
				y_next <= rst;
			else
				y_next <= s7;
			end if;
		end case;
	end process;
	
	output_proc:process(y_present)
	------- output process after this which will give
	------- let's make moore machine
	begin
	case y_present is
		when rst => outp <= "01111111";
		when s1 => outp <= "10101111";
		when s2 => outp <= "11011111";
		when s3 => outp <= "11101011";
		when s4 => outp <= "11110111";
		when s5 => outp <= "11111010";
		when s6 => outp <= "11111101";
		when s7 => outp <= "10111110";
	end case;
	end process;
end architecture;
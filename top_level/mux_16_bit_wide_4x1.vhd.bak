library work;
 use work.Gates.all;
library ieee;
 use ieee.std_logic_1164.all;
 use ieee.numeric_std.all;


entity top_level is
	----------------------------------
	--here have to decide how to write things in memory
	--how to give instructions
	--what instructions to give for demonstration
	
	--what outputs to get
	--how exactly testbench is to be visualized
	port(clk: in std_logic;
		Reg_A: out std_logic(15 downto 0)
	);
end entity top_level;

architecture struct of alu is
	
	component adder_subtractor is
		port(A, B: in std_logic_vector(15 downto 0);
				C_in: in std_logic;
				C: out std_logic_vector(15 downto 0);
				C_out: out std_logic
		);
	end component adder_subtractor;
		
	component AND_16 is
	port (A, B: in std_logic_vector(15 downto 0);
			C: out std_logic_vector(15 downto 0));
	end component;
	
	component multiplier is
		port(A, B: in std_logic_vector(15 downto 0);
			C: out std_logic_vector(15 downto 0)
		);
	end component multiplier;
	
	component OR_16 is
	port (A, B: in std_logic_vector(15 downto 0);
			C: out std_logic_vector(15 downto 0));
	end component;
	
	component IMPLY_16 is
	port (A, B: in std_logic_vector(15 downto 0);
			C: out std_logic_vector(15 downto 0));
	end component;
	
	component NOT_16 is
	port (A: in std_logic_vector(15 downto 0);
			C: out std_logic_vector(15 downto 0));
	end component;
	
	component Zero_Check is
		port(A: in std_logic_vector(15 downto 0);
				y : out std_logic);
	end component Zero_Check;
	
	component mux_16_bit_wide_8x1 is
		 Port ( I0, I1, I2, I3, I4, I5, I6, I7 : in STD_LOGIC_VECTOR (15 downto 0);
				  S : in STD_LOGIC_VECTOR(2 downto 0);
				  Y : out STD_LOGIC_VECTOR(15 downto 0));
	end component mux_16_bit_wide_8x1;
	
begin
	
	
end struct;